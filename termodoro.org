* Termodoro: the macOS terminal app to help you keep track of your time
  Termodoro is as stepping stone to a bunch of other console based apps
  that I want to write. Termodoro is written by entering VT100 terminal
  commands by hand to give me practice understanding how the terminal
  works, and it also seems like a simple project to practice multithreading
  with.

  I read a slideshow my john ousterhout that claimed that a programmer
  should avoid threads at most costs. Ousterhout claims that only a very
  few people are really qualified to write threaded code, and they're
  basically programming wizards. Perhaps this is arrogance, but I want to
  become a programming wizard.

  His presentation was dated 1995, so I wonder if it still holds. He claims
  that using events is much safer and easier alternative, and that for long
  running computations, you should spawn processes. I'm probably using
  threads for a bad reason here: UI asynchrony, but it's fun.

** Coding Style
   I will be using the same coding style as a certain St. Paul based
   medical devices company. It's a pretty good style. Makes the code nice
   and readable.

*** General Coding Guidelines
   
   - variables are all snake_case
     
   - functions are all CamelCase (with the exception of Main)
     
   - macros and constant variables are all ALL_CAPS_SNAKE_CASE
     
   - data types (structures and typedefs) are CamelCase.
     
   - lines will not exceed 90 characters, and shoot for less than 80.
     
   - for functions with lots of paramaters, lists will match up with the
     left parenthesis.
     
   - No nonstandard abbreviations in variable names. Config for
     "configuration" is fine. ret for "return", ldr for "loader" is not.

   - no obviously ambiguous abbreviations, regardless of whether or not the
     context gives a hint as to which abbreviation is meant.

     stat for "status" is not okay, since it could also mean "statistic" or
     "static".

   - dynamic memory allocation shall be avoided except on the initalization
     of the app. (Any function that dynamically allocates memory can only
     be called once, and most likely at the startup of the program. Any
     function that uses it must error if called more than once.

   - (as much as I dislike it) we will follow the tenet of structured
     programming that says "there shall be exactly 1 return statement per
     function".

*** File Layout and Commenting Guidelines

    - In Header files, the order is as follows
      - Macros
      - Data structures
      - Global Variables
        - these are to be organized logically to the components that use
          them. Ideally, we do not use globals from one component in
          another component. TODO move components to individual header
          files.
        - typedefs are a type of global. They should also go with the
          component that uses them.
      - Banners
        - Banners are to show the hierarchy of the grouping.
        - Banners outside of structures should end on column 81 with 0
          indexed collumns. (Cursor positioned /after/ ~/~.)
          long and be filled with stars.   
        - The titles in top level and second level banners should be ALL
          CAPS
          - top level banners should be started with ~/***~
          - subsequent levels always add three stars.
        - The titles in third level banners should be Title Case
        - The banners preceding function definitions should match the name
          of the function verbatim (CamelCase).
        - Banners should be used inside of structures to group related
          variables.
          - structure banners start with



    example banner:

    /


    
* Architecture

  termodoro is a multithreaded application. This is not for efficiency
  gains (other than avoiding polling) but rather because it makes handling
  asynchronous i/o more straightforward. Primarily output, though.

  The biggest issue is the timer. Putting the timer in a separate thread
  presents a huge simplification of the design, rather than needing to
  treat the timer incrementing by one second as a separate event. That
  would mean, like, polling. Yuck.

  I would not attempt doing it this way of I was dealing with any kind of
  library that wasn't completely thread-documented.

  Termodoro is supposed to be inside of the user apps folder.
  
** directory structure
   /home/user/Apps/termodoro/
   -- bin
   -- logs
   -- config
  
* Implementation
** Error Handling
   This really isn't a big app, so I don't see the need for excessive error handling, but I do see a purpose in using a system log.
*** Log Manager
    The log manager is a function that uses the configuration to determine
    how much to put into the log. Most of the time, it will only log
    important things, like the results of an important event, like runninga
    command or the timer dinging.

    NOTE it would be fun to create a really good log managing system that
    supported a bunch of modes that you could set with format strings explaining what specific things you wanted in your log file for which level of verbosity.

    It could just use format strings for each one.

    It should support three levels of verbosity, 4 if I'm into it:
    1. Normal

       Only main events are logged, like a command was executed, a file was
       written to, or the timer dinged.

    2. Verbose
       
       keypresses are logged and each time the timer ticks down a second,
       the log is written to.

    3. debug simple

       it logs the entire program state after every event.

    4. debug advanced

       it logs only the variables that have changed since the last state
       dump.
**** Methods

     
     ~LogFunctionCall(int function_id, char* message)~

     This should be called at the top of every function.

     int function_id: there should be a list of functions defined
     
     

       
    
** Threads

   If this was a text editor, then I would probably use processes instead,
   one process per buffer, and each buffer gets its own Lua/Commander
   intepreter.

   But this is not a text editor, and I don't feel like dealing with ipc
   and adding scripting just yet.

*** Some Notes about threading
    For thread safety, there's a very good reason why we try to not have
    state incorporated into the queue. We'd prefer only having one thread
    writing to the queue.

*** timer
    This thread handles writing to the displayLine the time

*** keyboardListener
    Adds anything it captures from the keyboard to an input queue that
    inputProcessor thread takes from while there's data in the queue.
    
    this could probably be called something else.

** Data
*** Data Structures
    All data structure types end with the word container.
    
**** StatusLogConfigContainer

     members:
     - log file name
     - level of verbosity
**** AppConfigContainer
     this holds configuration parameters that determine the behavior of the
     app. The variables in here are not frequently used at all.
    #+begin_src c
      typedef struct AppConfigurationContainer
      {
        /****************** Basic Settings **********************/
        int pomodoro_length_seconds;
        int pomodoro_short_break_length_seconds;
        int pomodoro_long_break_length_seconds;
        int pomodoro_set_length_seconds;
        int pomodoro_default_session_goal;

        /****************** Behavior Settings *******************/
        char continue_tracking_time_upon_completion;
        char auto_start_short_breaks;
        char auto_start_long_breaks;

        /****************** Display Settings ********************/
        char show_big_time;
        char show_small_time;
        char show_time_left;
        char show_command_prompt;
        char show_command_line;
        char show_instructions;
        char show_pomodoros_completed;
        char show_activity_log;

        /****************** Shortcuts ***************************/
        // these should all be set to the number associated with that control
        // number (c => 3, i => 9)
        char begin_pomodoro_shortcut;
        char begin_short_break_shortcut;
        char begin_long_break_shortcut;
        char enter_command_shortcut;
        char previous_char_shortcut;
        char next_char_shortcut;
        char view_help_document_shortcut;
        char interrupt_current_activity_shortcut;
        char exit_shortcut;

        /****************** Sound Settings **********************/
        char alert_with_audio;
        char* alert_audio_file_path;

        /****************** Font Settings ***********************/

        // this will hold character arrays as bit fields.
        // not every slot will be occupied, but in theory, all of ascii could be
        // employed. this is so that it can avoid needing a translation function
        // that would need to be updated every time a new character gets added,
        // not to mention would potentially waste system resources.
        char* display_line_font[128];

      } AppConfigurationContainer; 
    #+End_src
**** AppStateContainer
     This holds highly dynamic data in the program.
    #+begin_src c
      struct AppStateContainer
      {
  
      };
    #+end_src
*** screen_state
    Any sort of state that gets reflected on the screen directly is stored
    in the  screen_state structure. Members TBD.
    
**** Window Size
     When TimeTracker comes about, I'll need to handle SIGWINCH, but I don't
     see much utility in doing so at this point. (I'll be using curses at
     that point as well.)

     Instead, for now, all I plan in doing is assuming that the size of the
     screen is static 80x24. Like pesky unresizable desktop apps.
   
**** cursor position (just x)
      This is used when entering a command. Of course, C-f and C-b are the
      default. These should be configurable by the user by entering a
      command.

*** input queue

     for simplicity, if front = back that means that the queue is empty. if
     back = front - 1, that means the queue is full.

     this means that back always points to the location where (if the queue
     isn't full, it's going to put the next queued element.

     this also means that front always points to the element that is next to
     be dequeued unless the queue is empty
     
*** display line
    the display line is designed to be an ascii art large form of the
    amount of time on the clock. e.g.
    "12345" would be rendered as
    
    #+begin_src text
       $$    $$$   $$$     $  $$$$$ 
      $$$   $$ $$ $  $$   $$  $   $ 
      $$$       $     $  $ $  $     
       $$      $$   $$  $  $  $$$$  
       $$     $$     $$ $  $  $  $$ 
       $$    $$       $ $$$$$     $ 
      $$$$  $$    $  $$    $  $$ $$ 
      $$$$  $$$$$  $$$     $   $$$
    #+end_src

    The font is created by filling a structure with bitfields.

    TODO: This should maybe be configured by loading the data from a text
    file.
    
*** Configuration
    I was debating this for a while, but I think it would be a good idea to
    have the small amount of configuration that the user can do be stored
    in a file.

    The defaults are hard coded, and if a home folder configuration file is
    not available, it creates one and puts all the default configuration
    settings in it. On exit, if the configuration has been changed, it
    moves the previous config file to a backup directory and writes the
    current configuration to a new file and puts it in the home folder.

    The next question is, of course, what things go into this
    configuration?

    - defaults:
      - time for a pomodoro
      - time for a break
      - time for long break
      - behavior on end of pomodoro or break
    - Shortcuts:
      - begin pomodoro
      - begin short break
      - begin long break
      - enter command
      - exit
      - view help document.
      - add description of activity
      - export log to csv


    After answering that, we need to get the format down. Ideally, we use a
    grammar that is extremely easy to parse

    I think that this will serve as a default

    

    #+begin_src text
      pomodoro_length_seconds 1500 
      pomodoro_short_break_length_seconds 300
      pomodoro_long_break_length_seconds 1200
      pomodoro_set_length 4
      pomodoro_default_session_goal 15

      continue_tracking_time_upon_completion true
      auto_start_short_breaks false
      auto_start_long_breaks false

      show_big_time true
      show_small_time true
      show_time_logged_so_far true
      show_time_left true

      exit_shortcut e
      begin_pomodoro_shortcut p
      begin_short_break_shortcut s
      begin_long_break_shortcut l
      enter_command_shortcut c
      previous_char_shortcut b
      next_char_shortcut f
      view_help_document_shortcut h
      interrupt_current_activity i

      alert_with_audio true
      alert_audio_file watch_alarm.wav
    #+end_src

    
**** An assumption about the configuration file
     it won't ever exceed 64 kibibytes.
** Behavior
*** Drawing to the screen
    The screen is treated more like a way of displaying the state of the
    program conditionally. It only reflects the current settings of the
    variables. As such, it's handled by a single function, RedrawScreen,
    which looks at any variable that can change the creen renders
    accordingly.

    Variables affect the screen: (incomplete list)
    - display_line
    - command_line
    - basic insructions


    in general, I think I'll use a nano like interface for shortcuts

    top line:
    #+begin_src text
      C-p pomodoro | C-s short break | C-l long break | C-c command   
    #+end_src
   next is the command line. The prompt looks like this:
   #+begin_src text
     Termodoro >>>
   #+end_src

   the display line is able to write 13 characters to it, technically, but
   we'll only ever use 7 or 8.

   
       
*** Processing input

    There are two types of input: shortcuts and commands

    Shortcuts are entered by using the control key and a letter key..
    Commands are entered using the the command shortcut and then typing the
    command and pressing enter.

    #+begin_src text
      C-p ..... begin pomodoro
      C-s ..... begin short break
      C-l ..... begin long break
      C-c ..... enter a command
      C-h ..... open help document with less
      C-i ..... interrupt (pause) the current activity timer
    #+end_src

*** Commands
    each command
    
**** list of commands
     
***** set
      set is used to set configuration paramater. Any variable that affects
      the behavior of app.

***** save_configuration
      this will write the current configuration variables to the
      configuration file in the config folder.

***** start
      start takes an argument of "-pomodoro" "-long_break" "-short_break" or a
      time in the format of "mm:ss"

***** reset
      reset sets the timer up again for a new activity. It can take an
      argument of "-cancel" take away the current logged time due to that
      session from the daily cumulative total.
      
***** log_add
      log_add adds extra time to your daily goal that you weren't using the
      built-in timer for.

**** Processing Commands

     For testing this feature, of course, I'll need a driver. I think it
     will be simplest if I just do that first. While it seems like a
     flowery feature that's not necessary (which it sort of is), if I can
     get it down, it would be great practice for when I want to start
     ernest work on /Commander/.

     For now, testing can just be done inside of main. I'm going to fully
     debug the command interpreter before starting work on anything else.

     
***** The command Interpreter
      There are numerous ways of going about this (of course). For now, I'm
      just going to use a list of if/else statements with the common cases
      first.

      I guess that I have to write the default config first, though.

      

                  
** Algorithms
*** Command Line capture
    this is a text insertion algorithm. TBD
**** Discussion of Possible Algorithms

         
*** rendering the screen 
    layout and stuff. Very serious. TBD


* Work plan

  | time hrs | objective                             |
  |        8 | get configuration file loader working |
  |       10 | get the command interpreter working   |
  |        6 | get the display rendering done.       |
* User Manual
** Configuration and Customization
*** Default Configuration
*** Setting a Custom Big Font
*** Editing the Configuration File

    Important: The configuration file may not exceed 64 kibibytes!
    
